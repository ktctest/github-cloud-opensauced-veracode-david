name: Release

on:
  push:
    branches:
      - main
      - alpha
      - beta

jobs:
  setup:
    name: Set environment variables
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_ENVIRONMENT: ${{ steps.env.outputs.DEPLOY_ENVIRONMENT }}
    steps:
      - name: "☁️ compute environment variables"
        id: env
        run: |
          echo "DEPLOY_ENVIRONMENT=$([[ ${{ github.ref_name }} == 'main' ]] && echo 'production' || echo ${{ github.ref_name }})" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
#      - uses: montudor/action-zip@v1
#      - name: Zip the directory
#        run: zip -r test.zip .
#      - name: Upload test.zip
#        uses: actions/upload-artifact@v3
#        with:
#          name: test.zip
#          path: test.zip

  test:
    name: Test and lint
    uses: ./.github/workflows/development.yml

  Veracode_SCA_Scan:
    runs-on: ubuntu-latest
    needs: setup
    name: "Veracode SCA Scan"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Veracode SCA
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
        uses: veracode/veracode-sca@v2.1.9

  Veracode_SAST_Scan:
    runs-on: ubuntu-latest
    needs: setup
    name: "Veracode SAST Scan"
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      - uses: montudor/action-zip@v1
      - name: Zip the directory
        run: zip -r test.zip .
      - name: Upload test.zip
        uses: actions/upload-artifact@v3
        with:
          name: test.zip
          path: test.zip

#      - name: get archive
#        uses: actions/download-artifact@v3
#        with:
#          name: test.zip

      - name: pipeline-scan action step
        id: pipeline-scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.8
        with:
          vid: "${{ secrets.VERACODE_API_KEY_ID }}"
          vkey: "${{ secrets.VERACODE_API_KEY_SECRET }}"
          app_id: "david-cicd-test"
          file: "test.zip"

  import-issues:
    needs: Veracode_SAST_Scan
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: get scan results
        uses: actions/download-artifact@v3
        with:
          name: 'Veracode Pipeline-Scan Results'

      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@v2.1.19
        with:
          scan-results-json: 'test.zip'
          github-token: ${{ secrets.PRIVATE_TOKEN }}
#
#      - name: get archive
#        uses: actions/download-artifact@v3
#        with:
#          name: test.zip

      - name: Veracode Sandbox Scan
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          appname: "david-cicd-test"
          scantimeout: 30
          scanpollinginterval: 30
          createsandbox: "true"
          sandboxname: "TestGitHubOpenSauced"
          filepath: "test.zip"
          vid: "${{ secrets.VERACODE_API_KEY_ID }}"
          vkey: "${{ secrets.VERACODE_API_KEY_SECRET }}"
          criticality: 'High'
          deleteincompletescan: 1
          debug: "true"

#          file: "test.zip"
#      - name: Set up JDK 8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 8
#      - name: Download the Pipeline Scanner
#        uses: wei/curl@master
#        with:
#          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
#      - name: Unzip the Pipeline Scanner
#        run: unzip pipeline-scan-LATEST.zip
#      - name: Download test.zip
#        uses: actions/download-artifact@v3
#        with:
#          name: test.zip
#      - name: Run Pipeline Scanner
#        run: java -Dpipeline.debug=true -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --file "test.zip" --app_id "Veracode Demo" --fail_on_severity="Very High, High"
#        env:
#          github_token: ${{ secrets.PRIVATE_TOKEN }}

  docker:
    name: Build container
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "🔧 setup buildx"
        uses: docker/setup-buildx-action@v2

      - name: "🔧 cache docker layers"
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: "🔧 docker meta"
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          tags: latest

      - name: "📦 docker build"
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/docker.tar
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: "📂 docker artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: docker
          path: /tmp/docker.tar

  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "🔧 setup node"
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: "🔧 install npm@latest"
        run: npm i -g npm@latest

      - name: "📦 install dependencies"
        uses: bahmutov/npm-install@v1

      - name: "📊 repository visualizer"
        id: diagram
        uses: githubocto/repo-visualizer@0.9.1
        with:
          excluded_paths: "node_modules,build,.storybook,.netlify,.github,npm-shrinkwrap.json"
          output_file: "public/diagram.svg"
          should_push: false
          root_path: "src/"

      - name: "📊 visualiser artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: diagram
          path: public/diagram.svg

      - name: "🚀 static app"
        run: npm run build

      - name: "📂 production artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  release:
    environment:
      name: ${{ needs.setup.outputs.DEPLOY_ENVIRONMENT }}
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Semantic release
    needs:
      - setup
      - test
      - docker
      - build
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "♻️ clean up artifact paths"
        run: |
          rm -rf public/diagram.svg

      - name: "📂 download docker artifacts"
        uses: actions/download-artifact@v3
        with:
          name: docker
          path: /tmp

      - name: "📦 load tag"
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a

      - name: "📂 download build artifacts"
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: "📂 download diagram artifacts"
        uses: actions/download-artifact@v3
        with:
          name: diagram
          path: public/

      - name: "🚀 release"
        id: semantic-release
        uses: open-sauced/release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup actions
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            build
            docker
            diagram
