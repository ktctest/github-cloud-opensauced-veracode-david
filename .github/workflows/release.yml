name: Release

on:
  push:
    branches:
      - main
      - alpha
      - beta

jobs:
  setup:
    name: "Set environment variables"
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_ENVIRONMENT: ${{ steps.env.outputs.DEPLOY_ENVIRONMENT }}
    steps:
      - name: "☁️ compute environment variables"
        id: env
        run: |
          echo "DEPLOY_ENVIRONMENT=$([[ ${{ github.ref_name }} == 'main' ]] && echo 'production' || echo ${{ github.ref_name }})" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
      - name: "Install zip unzip"
        uses: apt-get update -qy && apt-get install -y zip unzip

  test:
    name: "Test and lint"
    uses: ./.github/workflows/development.yml

  sca-scan:
    name: SCA Scan
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Veracode SCA
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
        uses: veracode/veracode-sca@v2.1.11
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: true
  #           fail-on-cvss: 1
  #           min-cvss-for-issue: 1

  sast-upload:
    name: SAST Upload Scan
    needs: [setup, sca-scan]
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      # create artifact for SAST Scan
#      - name: "create artifact"
#        run: |
#          zip -R veracode-artifacts.zip '*.py' '*.html' '*.htm' '*.js' '*.php' 'requirements.txt' '*.json' '*.lock' '*.ts' '*.pl' '*.pm' '*.plx' '*.pl5' '*.cgi' '*.go' '*.sum' '*.mod'

      # get the compiled binary from a previous job
#      - name: get archive
#        uses: actions/download-artifact@v3
#        with:
#          name: veracode-artifact
#          path: ./veracode_artifact_directory
#      - name: Get the name of the downloaded files
#        run: |
#          artifact_file=$(ls -1 ./veracode_artifact_directory | head -n 1)
#          echo "veracode_artifact=$artifact_file" >> $GITHUB_ENV
      # run the pipeline upload scan action to see results in Veracode Analysis Center
      - name: Veracode Pipeline-Scan
        id: pipeline-scan
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          appname: 'david-cicd-test'
          createprofile: false
#          filepath: ./veracode_artifact_directory/${{ env.veracode_artifact }}
          vid: "${{ secrets.VERACODE_API_ID }}"
          vkey: "${{ secrets.VERACODE_API_KEY }}"
          # Delete a scan of any status except Results Ready to proceed with the uploadandscan action.
          # If errors occur when running this action, the Java wrapper automatically deletes the incomplete scan.
          deleteincompletescan: 2

  # run pipeline scan to get flaws, which will be imported as GitHub issues
  sast-to-issues:
    name: SAST Scan to Issues
    needs: [setup, sca-scan]
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      # create artifact for SAST Scan

#      # get the compiled binary from a previous job
#      - name: get archive
#        uses: actions/download-artifact@v3
#        with:
#          name: veracode-artifact
#          path: ./veracode_artifact_directory
#
#      - name: Get the name of the downloaded files
#        run: |
#          artifact_file=$(ls -1 ./veracode_artifact_directory | head -n 1)
#          echo "veracode_artifact=$artifact_file" >> $GITHUB_ENV

      # run the pipeline scan action
      - name: Veracode Pipeline-Scan
        id: pipeline-scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.10
        with:
          vid: "${{ secrets.VERACODE_API_ID }}"
          vkey: "${{ secrets.VERACODE_API_KEY }}"
          veracode_policy_name: "${{ inputs.policy_name }}"
#          file: ./veracode_artifact_directory/${{ env.veracode_artifact }}
          # Must be false, so the import-issues job can create issues, and fail upon findings.
          fail_build: false

      # import flaws to issues
      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@v2.1.19
        with:
          scan-results-json: 'results.json'
          # must be true to fail upon issue creation
          fail_build: true

  docker:
    name: Build container
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "🔧 setup buildx"
        uses: docker/setup-buildx-action@v2

      - name: "🔧 cache docker layers"
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: "🔧 docker meta"
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          tags: latest

      - name: "📦 docker build"
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/docker.tar
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: "📂 docker artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: docker
          path: /tmp/docker.tar

  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "🔧 setup node"
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: "🔧 install npm@latest"
        run: npm i -g npm@latest

      - name: "📦 install dependencies"
        uses: bahmutov/npm-install@v1

      - name: "📊 repository visualizer"
        id: diagram
        uses: githubocto/repo-visualizer@0.9.1
        with:
          excluded_paths: "node_modules,build,.storybook,.netlify,.github,npm-shrinkwrap.json"
          output_file: "public/diagram.svg"
          should_push: false
          root_path: "src/"

      - name: "📊 visualiser artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: diagram
          path: public/diagram.svg

      - name: "🚀 static app"
        run: npm run build

      - name: "📂 production artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  release:
    environment:
      name: ${{ needs.setup.outputs.DEPLOY_ENVIRONMENT }}
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Semantic release
    needs:
      - setup
      - test
      - docker
      - build
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "♻️ clean up artifact paths"
        run: |
          rm -rf public/diagram.svg
      - name: "📂 download docker artifacts"
        uses: actions/download-artifact@v3
        with:
          name: docker
          path: /tmp

      - name: "📦 load tag"
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a
      - name: "📂 download build artifacts"
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: "📂 download diagram artifacts"
        uses: actions/download-artifact@v3
        with:
          name: diagram
          path: public/

      - name: "🚀 release"
        id: semantic-release
        uses: open-sauced/release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup actions
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            build
            docker
            diagram
