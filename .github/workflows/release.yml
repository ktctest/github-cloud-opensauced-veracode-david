name: Release

on:
  push:
    branches:
      - main
      - alpha
      - beta

jobs:
  setup:
    name: "Set environment variables"
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_ENVIRONMENT: ${{ steps.env.outputs.DEPLOY_ENVIRONMENT }}
    steps:
      - name: "☁️ compute environment variables"
        id: env
        run: |
          echo "DEPLOY_ENVIRONMENT=$([[ ${{ github.ref_name }} == 'main' ]] && echo 'production' || echo ${{ github.ref_name }})" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
      # zip project for SAST Scan
      - name: "Zip directory"
#        run: sudo apt-get update -qy
#      - name: install zip
#        run: sudo apt-get install -y zip unzip
#      - name: zip it
#        run: zip -R test.zip '*.py' '*.html' '*.htm' '*.js' '*.php' 'requirements.txt' '*.json' '*.lock' '*.ts' '*.pl' '*.pm' '*.plx' '*.pl5' '*.cgi' '*.go' '*.sum' '*.mod'

        uses: montudor/action-zip@v1
        with:
          args: zip -r test.zip .
      # upload project for SAST scan
      - name: "Upload test.zip"
        uses: actions/upload-artifact@v3
        with:
          name: test.zip
          path: test.zip

  test:
    name: "Test and lint"
    uses: ./.github/workflows/development.yml

  security_sca:
    name: "Veracode SCA Scan"
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: "checkout repo"
        uses: actions/checkout@v3
      - name: "run Veracode SCA"
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
        uses: veracode/veracode-sca@v2.1.9

  security_sast:
    name: "Veracode SAST Scan"
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: veracode/api-signing:latest
    steps:
#      add github static scan
      - name: "Download Veracode CLI"
        uses: wei/curl@master
        with:
          args: -fsS https://tools.veracode.com/veracode-cli/install | sh
      - name: Run a static scan
        run: ./veracode static scan verademo.war
        env:
          VERACODE_API_KEY_ID: ${{ secrets.myVeracodeId }}
          VERACODE_API_KEY_SECRET: ${{ secrets.myVeracodeSecret }}
#       add import flaws
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
      - name: "get policy flaws"
        run: |
          cd /tmp
          export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=david-cicd-test" | jq -r '._embedded.applications[0].guid') 
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
          echo TOTAL_FLAWS: ${total_flaws}
          http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json

      - name: "save results file"
        uses: actions/upload-artifact@v3
        with:
          name: policy-flaws
          path: /tmp/policy_flaws.json

  # This step will import flaws from the step above
  import-policy-flaws:
    needs: "security_sast"
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: get flaw file
        uses: actions/download-artifact@v3
        with:
          name: policy-flaws
          path: /tmp

      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@v2.1.19
        with:
          scan-results-json: '/tmp/policy_flaws.json'


#security_sast:
#    name: "Veracode SAST Scan"
#    needs: setup
#    runs-on: ubuntu-latest
#    steps:
#     - name: "checkout repo"
#       uses: actions/checkout@v3
#     - name: "get archive"
#       uses: actions/download-artifact@v3
#       with:
#         name: "test.zip"
#     - name: "Download Veracode CLI"
#       uses: wei/curl@master
#       with:
#         args: -fsS https://tools.veracode.com/veracode-cli/install | sh
#     - name: "Run a static scan"
#       run: ./veracode static scan test.zip
#       env:
#          VERACODE_API_KEY_ID: ${{ secrets.VERACODE_API_ID }}
#          VERACODE_API_KEY_SECRET: ${{ secrets.VERACODE_API_KEY }}
#     - name: import flaws as issues
#       if: ${{ always()  }}
#       uses: veracode/veracode-flaws-to-issues@v2.1.19
#       with:
#         scan-results-json: 'filtered_results.json'
#         github-token: ${{ secrets.PRIVATE_TOKEN }}


#    steps:
#      - name: "checkout repo"
#        uses: actions/checkout@v3
#      - name: "get archive"
#        uses: actions/download-artifact@v3
#        with:
#          name: "test.zip"
#      - name: "Set up JDK 1.8"
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.8
#      - name: "Download the Pipeline Scanner"
#        uses: wei/curl@master
#        with:
#          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
#      - name: "Unzip the Pipeline Scanner"
#        run: unzip -qq -n pipeline-scan-LATEST.zip
#      - name: "Run Pipeline Scanner"
#        run: java -Dpipeline.debug=true -jar pipeline-scan.jar
#         --veracode_api_id "${{secrets.VERACODE_API_ID}}"
#         --veracode_api_key "${{secrets.VERACODE_API_KEY}}"
#         --file "test.zip"
#         --fail_on_severity="Very High, High, Medium"

  sast-issues:
    name: "SAST Results to Issues"
    needs: [security_sca, security_sast]
    if: ${{ always()  }}
    runs-on: ubuntu-latest
    steps:
      - name: "checkout repo"
        uses: actions/checkout@v3

      - name: "get scan results"
        uses: actions/download-artifact@v3
        with:
          name: 'Veracode Pipeline-Scan Results'

      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@v2.1.19
        with:
          scan-results-json: 'filtered_results.json'
          github-token: ${{ secrets.PRIVATE_TOKEN }}

  docker:
    name: Build container
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "🔧 setup buildx"
        uses: docker/setup-buildx-action@v2

      - name: "🔧 cache docker layers"
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: "🔧 docker meta"
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          tags: latest

      - name: "📦 docker build"
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/docker.tar
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: "📂 docker artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: docker
          path: /tmp/docker.tar

  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "🔧 setup node"
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: "🔧 install npm@latest"
        run: npm i -g npm@latest

      - name: "📦 install dependencies"
        uses: bahmutov/npm-install@v1

      - name: "📊 repository visualizer"
        id: diagram
        uses: githubocto/repo-visualizer@0.9.1
        with:
          excluded_paths: "node_modules,build,.storybook,.netlify,.github,npm-shrinkwrap.json"
          output_file: "public/diagram.svg"
          should_push: false
          root_path: "src/"

      - name: "📊 visualiser artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: diagram
          path: public/diagram.svg

      - name: "🚀 static app"
        run: npm run build

      - name: "📂 production artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  release:
    environment:
      name: ${{ needs.setup.outputs.DEPLOY_ENVIRONMENT }}
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Semantic release
    needs:
      - setup
      - test
      - docker
      - build
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "♻️ clean up artifact paths"
        run: |
          rm -rf public/diagram.svg

      - name: "📂 download docker artifacts"
        uses: actions/download-artifact@v3
        with:
          name: docker
          path: /tmp

      - name: "📦 load tag"
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a

      - name: "📂 download build artifacts"
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: "📂 download diagram artifacts"
        uses: actions/download-artifact@v3
        with:
          name: diagram
          path: public/

      - name: "🚀 release"
        id: semantic-release
        uses: open-sauced/release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup actions
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            build
            docker
            diagram
